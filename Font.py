#ASCII Character Set
cmap = ['00000000000000000000000000000000000', #Space
        '00100001000010000100001000000000100', #!
        '01010010100000000000000000000000000', #"
        '01010010101101100000110110101001010', ##
        '00100011111000001110000011111000100', #$
        '11001110010001000100010001001110011', #%
        '01000101001010001000101011001001101', #&
        '10000100001000000000000000000000000', #'
        '00100010001000010000100000100000100', #(
        '00100000100000100001000010001000100', #)
        '00000001001010101110101010010000000', #*
        '00000001000010011111001000010000000', #+
        '000000000000000000000000000000110000100010000', #,
        '00000000000000011111000000000000000', #-
        '00000000000000000000000000110001100', #.
        '00001000010001000100010001000010000', #/
        '01110100011000110101100011000101110', #0
        '00100011000010000100001000010001110', #1
        '01110100010000101110100001000011111', #2
        '01110100010000101110000011000101110', #3
        '00010001100101011111000100001000010', #4
        '11111100001111000001000011000101110', #5
        '01110100001000011110100011000101110', #6
        '11111000010001000100010001000010000', #7
        '01110100011000101110100011000101110', #8
        '01110100011000101111000010000101110', #9
        '00000011000110000000011000110000000', #:
        '01100011000000001100011000010001000', #;
        '00010001000100010000010000010000010', #<
        '00000000001111100000111110000000000', #=
        '01000001000001000001000100010001000', #>
        '01100100100001000100001000000000100', #?
        '01110100010000101101101011010101110', #@
        '00100010101000110001111111000110001', #A
        '11110010010100111110010010100111110', #B
        '01110100011000010000100001000101110', #C
        '11110010010100101001010010100111110', #D
        '11111100001000011100100001000011111', #E
        '11111100001000011100100001000010000', #F
        '01110100011000010111100011000101110', #G
        '10001100011000111111100011000110001', #H
        '01110001000010000100001000010001110', #I
        '00111000100001000010000101001001100', #J
        '10001100101010011000101001001010001', #K
        '10000100001000010000100001000011111', #L
        '10001110111010110101100011000110001', #M
        '10001110011010110011100011000110001', #N
        '01110100011000110001100011000101110', #O
        '11110100011000111110100001000010000', #P
        '01110100011000110001101011001001101', #Q
        '11110100011000111110101001001010001', #R
        '01110100011000001110000011000101110', #S
        '11111001000010000100001000010000100', #T
        '10001100011000110001100011000101110', #U
        '10001100011000101010010100010000100', #V
        '10001100011000110101101011101110001', #W
        '10001100010101000100010101000110001', #X
        '10001100010101000100001000010000100', #Y
        '11111000010001000100010001000011111', #Z
        '01110010000100001000010000100001110', #[
        '10000100000100000100000100000100001', #\
        '00111000010000100001000010000100111', #]
        '00100010101000100000000000000000000', #^
        '00000000000000000000000000000011111', #_
        '11000110001000001000000000000000000', #`
        '00000000000111000001011111000101110', #a
        '10000100001011011001100011100110110', #b
        '00000000000011101000010000100000111', #c
        '00001000010110110011100011001101101', #d
        '00000000000111010001111111000001110', #e
        '00110010010100011110010000100001000', #f
        '000000000001110100011000110001011110000101110', #g
        '10000100001011011001100011000110001', #h
        '00100000000110000100001000010001110', #i
        '0001000000001100001000010000101001001100', #j
        '10000100001001010100110001010010010', #k
        '01100001000010000100001000010001110', #l
        '00000000001101010101101011010110101', #m
        '00000000001011011001100011000110001', #n
        '00000000000111010001100011000101110', #o
        '000000000001110100011000110001111101000010000', #p
        '000000000001110100011000110001011110000100001', #q
        '00000000001011011001100001000010000', #r
        '00000000000111110000011100000111110', #s
        '00100001000111100100001000010000111', #t
        '00000000001000110001100011001101101', #u
        '00000000001000110001100010101000100', #v
        '00000000001000110001101011010101010', #w
        '00000000001000101010001000101010001', #x
        '000000000010001100011000110001011110000101110', #y
        '00000000001111100010001000100011111', #z
        '00010001000010001000001000010000010', #{
        '00100001000010000000001000010000100', #|
        '01000001000010000010001000010001000', #}
        '01000101010001000000000000000000000' #}~
]


def PrintString(display,string,xpos,ypos,size,color):
    if size == 2:
        spacing = 12
    elif size == 1:
        spacing = 6
    elif size == 3:
        spacing = 18
    for i in string:
        PrintChar(display,i,xpos,ypos,size,color)
        xpos+=spacing
        
def PrintStringV(display,string,xpos,ypos,size,color):
    if size == 2:
        spacing = 14
    elif size == 1:
        spacing = 6
    elif size == 3:
        spacing = 18
    for i in string:
        PrintCharV(display,i,xpos,ypos,size,color)
        ypos-=spacing
        
def PrintChar(display,letter,xpos,ypos,size,color):
    origin = xpos
    if letter == 'Â°':
        character = '01100100101001001100000000000000000'
    else:
        charval = ord(letter)
        index = charval-32 #start code, 32 or space
        character = cmap[index] #this is our char...
    rows = [character[i:i+5] for i in range(0,len(character),5)]
    for row in rows:
        for bit in row:
            #print(bit)
            if bit == '1':
                if size==1:
                    display.pixel(xpos,ypos, color)
                elif size==2:
                    display.pixel(xpos,ypos+1, color)
                    display.pixel(xpos+1,ypos, color)
                    display.pixel(xpos+1,ypos+1, color)
                elif size==3:
                    display.pixel(xpos + 1,ypos + 1, color)
                    display.pixel(xpos, ypos + 1, color)
                    display.pixel(xpos + 2, ypos+1, color)
                    display.pixel(xpos + 1, ypos, color)
                    display.pixel(xpos + 1, ypos+1, color)
                    display.pixel(xpos + 1, ypos+2, color)
            xpos+=size
        xpos=origin
        ypos+=size

def PrintCharV(display,letter,xpos,ypos,size,color):
    origin = ypos #origin = xpos
    charval = ord(letter)
    #print(charval)
    index = charval-32 #start code, 32 or space
    #print(index)
    character = cmap[index] #this is our char...
    rows = [character[i:i+5] for i in range(0,len(character),5)]
    #print(rows)
    for row in rows:
        #print(row)
        for bit in row:
            #print(bit)
            if bit == '1':
                if size==1:
                    display.pixel(xpos,ypos, color)
                elif size==2:
                    display.pixel(xpos,ypos+1, color)
                    display.pixel(xpos+1,ypos, color)
                    display.pixel(xpos+1,ypos+1, color)
                elif size==3:
                    display.pixel(xpos + 1,ypos + 1, color)
                    display.pixel(xpos, ypos + 1, color)
                    display.pixel(xpos + 2, ypos+1, color)
                    display.pixel(xpos + 1, ypos, color)
                    display.pixel(xpos + 1, ypos+1, color)
                    display.pixel(xpos + 1, ypos+2, color)
            ypos-=size
        ypos=origin
        xpos+=size
